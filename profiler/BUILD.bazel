load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load(
    "@gz//bazel/lint:lint.bzl",
    "add_lint_tests",
)
load(
    "@gz//bazel/skylark:build_defs.bzl",
    "GZ_FEATURES",
    "GZ_ROOT",
    "GZ_VISIBILITY",
    "cmake_configure_file",
    "gz_export_header",
    "gz_include_header",
)

package(
    default_applicable_licenses = [GZ_ROOT + "common:license"],
    features = GZ_FEATURES,
)

# Configuration for UNIX
RMT_ENABLED = 1

RMT_USE_TINYCRT = 0

RMT_USE_CUDA = 0

RMT_USE_D3D11 = 0

RMT_USE_OPENGL = 1

RMT_USE_METAL = 0

cmake_configure_file(
    name = "remotery_config",
    src = "src/RemoteryConfig.h.in",
    out = "include/RemoteryConfig.h",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "RMT_ENABLED=%d" % RMT_ENABLED,
        "RMT_USE_TINYCRT=%d" % RMT_USE_TINYCRT,
        "RMT_USE_CUDA=%d" % RMT_USE_CUDA,
        "RMT_USE_D3D11=%d" % RMT_USE_D3D11,
        "RMT_USE_OPENGL=%d" % RMT_USE_OPENGL,
        "RMT_USE_METAL=%d" % RMT_USE_METAL,
    ],
    visibility = ["//visibility:private"],
)

gz_export_header(
    name = "include/gz/common/profiler/Export.hh",
    export_base = "GZ_COMMON_PROFILER",
    lib_name = "gz-common-profiler",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/gz/common/Profiler.hh",
    "include/gz/common/ProfilerImpl.hh",
]

gz_include_header(
    name = "profiler_hh_genrule",
    out = "include/gz/common/profiler.hh",
    hdrs = public_headers_no_gen + [
        "include/gz/common/profiler/Export.hh",
    ],
)

cc_library(
    name = "remotery",
    srcs = ["src/Remotery/lib/Remotery.c"],
    hdrs = ["src/Remotery/lib/Remotery.h"],
    includes = ["src/Remotery/lib"],
)

cc_library(
    name = "ProfilerImplInterface",
    hdrs = [
        "include/gz/common/ProfilerImpl.hh",
        "include/gz/common/profiler/Export.hh",
    ],
    includes = ["include"],
    visibility = GZ_VISIBILITY,
)

cc_library(
    name = "RemoteryProfilerImpl",
    srcs = ["src/RemoteryProfilerImpl.cc"],
    hdrs = [
        "include/RemoteryConfig.h",
        "src/RemoteryProfilerImpl.hh",
    ],
    includes = ["include"],
    visibility = GZ_VISIBILITY,
    deps = [
        GZ_ROOT + "common",
        ":ProfilerImplInterface",
        ":remotery",
    ],
)

# Build flag to control how the Gz Profiler is configured.
# --//profiler:config="disabled" (default): Profiler will be disabled.
# --//profiler:config="remotery": Profiler will be enabled and the Remotery
#   profiler implemenation will be used.
# --//profiler:config="custom": Profiler will be enabled and a custom profiler
#   implementation can be set to be used. See Profiler class for details.
#
# Note to maintainers: This setup is different from what is used in CMake where
# the config is split into two parts to control whether Remotery is used or not
# separately from whether the profiler is enabled or disabled.
string_flag(
    name = "config",
    build_setting_default = "disabled",
    values = [
        "disabled",
        "remotery",
        "custom",
    ],
)

config_setting(
    name = "disabled",
    flag_values = {
        ":config": "disabled",
    },
)

config_setting(
    name = "use_remotery",
    flag_values = {
        ":config": "remotery",
    },
)

config_setting(
    name = "use_custom",
    flag_values = {
        ":config": "custom",
    },
)

public_headers = public_headers_no_gen + [
    "include/gz/common/profiler.hh",
    "include/gz/common/profiler/Export.hh",
]

sources = ["src/Profiler.cc"]

cc_library(
    name = "profiler",
    srcs = sources,
    hdrs = public_headers,
    defines = select({
        "disabled": [
            "GZ_PROFILER_ENABLE=0",
            "GZ_PROFILER_REMOTERY=0",
        ],
        "use_remotery": [
            "GZ_PROFILER_ENABLE=1",
            "GZ_PROFILER_REMOTERY=1",
        ],
        "use_custom": [
            "GZ_PROFILER_ENABLE=1",
            "GZ_PROFILER_REMOTERY=0",
        ],
    }),
    includes = ["include"],
    visibility = GZ_VISIBILITY,
    deps = [
        GZ_ROOT + "common",
        ":ProfilerImplInterface",
    ] + select({
        "use_remotery": [":RemoteryProfilerImpl"],
        "//conditions:default": [],
    }),
)

add_lint_tests()
