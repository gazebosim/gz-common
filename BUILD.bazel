load(
    "//gz_bazel:build_defs.bzl",
    "GZ_FEATURES",
    "GZ_ROOT",
    "GZ_VISIBILITY",
    "generate_include_header",
    "gz_config_header",
    "gz_export_header",
)

package(
    default_visibility = GZ_VISIBILITY,
    features = GZ_FEATURES,
)

licenses(["notice"])

exports_files(["LICENSE"])

PROJECT_NAME = "gz-common"

PROJECT_MAJOR = 5

PROJECT_MINOR = 0

PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
gz_config_header(
    name = "config",
    src = "include/gz/common/config.hh.in",
    cmakelists = ["CMakeLists.txt"],
    project_name = PROJECT_NAME,
    project_version = (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),
)

gz_export_header(
    name = "include/gz/common/Export.hh",
    export_base = "GZ_COMMON",
    lib_name = "gz-common",
    visibility = ["//visibility:private"],
)

public_headers_no_gen = glob([
    "include/gz/common/*.hh",
    "include/gz/common/detail/*.hh",
])

private_headers = [
    "src/PluginUtils.hh",
    "src/PrintWindowsSystemWarning.hh",
]

sources = glob(
    ["src/*.cc"],
    exclude = ["src/*_TEST.cc"],
)

generate_include_header(
    name = "commonhh_genrule",
    out = "include/gz/common.hh",
    hdrs = public_headers_no_gen + [
        "include/gz/common/config.hh",
        "include/gz/common/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/gz/common/config.hh",
    "include/gz/common/Export.hh",
    "include/gz/common.hh",
]

cc_library(
    name = "gz_common",
    srcs = sources + private_headers,
    hdrs = public_headers,
    includes = ["include"],
    linkopts = ["-ldl"],
    deps = [
        "@uuid",
        GZ_ROOT + "gz_math",
    ],
)

cc_binary(
    name = "libgz-common5.so",
    includes = ["include"],
    linkopts = ["-Wl,-soname,libgz-common5.so"],
    linkshared = True,
    deps = [":gz_common"],
)

test_srcs = glob(
    ["src/*_TEST.cc"],
    exclude = ["src/PluginLoader_TEST.cc"],
)

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    data = [":libgz-common5.so"],
    deps = [
        ":gz_common",
        GZ_ROOT + "gz_bazel:utilities",
        GZ_ROOT + "gz_common/test:test_utils",
        "@gtest",
        "@gtest//:gtest_main",
    ],
) for src in test_srcs]
