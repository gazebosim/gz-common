load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:generate_file.bzl",
    "generate_file",
)

package(default_visibility = ["//visibility:public"])

PROJECT_NAME = "ignition-common"
PROJECT_MAJOR = 4
PROJECT_MINOR = 0
PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/common/config.hh.in",
    out = "include/ignition/common/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % (PROJECT_NAME),
    ],
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/common/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_MATH_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_COMMON_VISIBLE
#undef IGNITION_COMMON_VISIBLE
#endif
#define IGNITION_COMMON_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)

public_headers_no_gen = [
    "include/ignition/common/Base64.hh",
    "include/ignition/common/Battery.hh",
    "include/ignition/common/Console.hh",
    "include/ignition/common/detail/Plugin.hh",
    "include/ignition/common/detail/PluginLoader.hh",
    "include/ignition/common/detail/PluginMacros.hh",
    "include/ignition/common/detail/PluginPtr.hh",
    "include/ignition/common/detail/SpecializedPlugin.hh",
    "include/ignition/common/detail/SuppressWarning.hh",
    "include/ignition/common/detail/TemplateHelpers.hh",
    "include/ignition/common/EnumIface.hh",
    "include/ignition/common/Filesystem.hh",
    "include/ignition/common/MaterialDensity.hh",
    "include/ignition/common/MovingWindowFilter.hh",
    "include/ignition/common/Plugin.hh",
    "include/ignition/common/PluginInfo.hh",
    "include/ignition/common/PluginLoader.hh",
    "include/ignition/common/PluginMacros.hh",
    "include/ignition/common/PluginPtr.hh",
    "include/ignition/common/SignalHandler.hh",
    "include/ignition/common/SingletonT.hh",
    "include/ignition/common/SpecializedPlugin.hh",
    "include/ignition/common/SpecializedPluginPtr.hh",
    "include/ignition/common/StringUtils.hh",
    "include/ignition/common/SuppressWarning.hh",
    "include/ignition/common/SystemPaths.hh",
    "include/ignition/common/TemplateHelpers.hh",
    "include/ignition/common/Time.hh",
    "include/ignition/common/Timer.hh",
    "include/ignition/common/URI.hh",
    "include/ignition/common/Util.hh",
    "include/ignition/common/Uuid.hh",
    "include/ignition/common/WorkerPool.hh",
]

private_headers = [
    "src/PluginUtils.hh",
    "src/PrintWindowsSystemWarning.hh",
]

generate_include_header(
    name = "commonhh_genrule",
    out = "include/ignition/common.hh",
    hdrs = public_headers_no_gen + [
        "include/ignition/common/config.hh",
        "include/ignition/common/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/common/config.hh",
    "include/ignition/common/Export.hh",
    "include/ignition/common.hh",
]

cc_binary(
    name = "libignition-common4.so",
    srcs = [
        "src/Base64.cc",
        "src/Battery.cc",
        "src/Console.cc",
        "src/FilesystemBoost.cc",
        "src/Filesystem.cc",
        "src/MaterialDensity.cc",
        "src/Plugin.cc",
        "src/PluginLoader.cc",
        "src/SignalHandler.cc",
        "src/StringUtils.cc",
        "src/SystemPaths.cc",
        "src/Time.cc",
        "src/Timer.cc",
        "src/URI.cc",
        "src/Util.cc",
        "src/Uuid.cc",
        "src/WorkerPool.cc",
    ] + private_headers + public_headers,
    includes = ["include"],
    linkopts = ["-Wl,-soname,libignition-common4.so", "-ldl", "-luuid"],
    linkshared =  True,
    visibility = [],
    deps = ["//ign_math"],
)

cc_library(
    name = "ign_common",
    srcs = ["libignition-common4.so"],
    hdrs = public_headers,
    deps = ["//ign_math"],
    includes = ["include"],
    visibility = ["//visibility:public"],
)

test_srcs = [
    "src/Base64_TEST.cc",
    "src/Console_TEST.cc",
    "src/Filesystem_TEST.cc",
    "src/MaterialDensity_TEST.cc",
    "src/PluginLoader_TEST.cc",
    "src/SignalHandler_TEST.cc",
    "src/StringUtils_TEST.cc",
    "src/SystemPaths_TEST.cc",
    "src/TemplateHelpers_TEST.cc",
    "src/Time_TEST.cc",
    "src/URI_TEST.cc",
    "src/Util_TEST.cc",
    "src/Uuid_TEST.cc",
    "src/WorkerPool_TEST.cc",
]

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    deps = [
        "//ign_common",
        "//ign_common/test:test_utils",
        "@gtest//:gtest",
        "@gtest//:gtest_main",
    ]
) for src in test_srcs]
